from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional

class TerraformVariableDoc(BaseModel):
    name: str
    type: Optional[str] = None
    description: Optional[str] = None
    default: Optional[Any] = None # Can be any type
    is_sensitive: bool = False

class TerraformOutputDoc(BaseModel):
    name: str
    description: Optional[str] = None
    # Value is not usually documented from HCL, but sensitive status might be
    is_sensitive: bool = False

class TerraformResourceDoc(BaseModel):
    resource_type: str # e.g., "aws_instance"
    resource_name: str # e.g., "my_web_server"
    # We might not extract all attributes, but key ones or a summary
    # For now, just type and name. Detailed attributes can be a future enhancement.
    # attributes: Dict[str, Any] = Field(default_factory=dict)
    source_file: str # File where this resource is defined
    # comments: Optional[str] = None # Associated comments

class TerraformModuleCallDoc(BaseModel):
    module_name: str # Logical name of the module call
    source: str # Source path/URL of the module
    # version: Optional[str] = None # If specified
    # arguments: Dict[str, Any] = Field(default_factory=dict) # Key arguments passed
    source_file: str
    # comments: Optional[str] = None

class TerraformProviderDoc(BaseModel):
    name: str # e.g., "aws"
    alias: Optional[str] = None
    # config: Dict[str, Any] = Field(default_factory=dict) # e.g. region, version
    source_file: str

class TerraformFileDoc(BaseModel):
    """Represents documentation extracted from a single .tf file."""
    file_path: str
    description: Optional[str] = None # Module-level or file-level comment
    variables: List[TerraformVariableDoc] = Field(default_factory=list)
    outputs: List[TerraformOutputDoc] = Field(default_factory=list)
    resources: List[TerraformResourceDoc] = Field(default_factory=list)
    module_calls: List[TerraformModuleCallDoc] = Field(default_factory=list)
    providers: List[TerraformProviderDoc] = Field(default_factory=list)
    # data_sources: List[...] # Future

class TerraformModuleProcessedDoc(BaseModel):
    """Represents combined documentation for a Terraform module (directory)."""
    module_path: str # Directory path of the module
    description: Optional[str] = None # Overall module description (e.g., from a main.tf comment or a dedicated doc file)
    files: List[TerraformFileDoc] = Field(default_factory=list)

    # Aggregated view (optional, can be generated by assembler)
    # all_variables: List[TerraformVariableDoc] = Field(default_factory=list)
    # all_outputs: List[TerraformOutputDoc] = Field(default_factory=list)
    # all_resources: List[TerraformResourceDoc] = Field(default_factory=list)
    # all_module_calls: List[TerraformModuleCallDoc] = Field(default_factory=list)
    # all_providers: List[TerraformProviderDoc] = Field(default_factory=list)
