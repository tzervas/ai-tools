Metadata-Version: 2.4
Name: app
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastapi<0.116.0,>=0.115.0
Requires-Dist: uvicorn[standard]<0.35.0,>=0.34.0
Requires-Dist: httpx<0.28.0,>=0.27.0
Requires-Dist: python-gnupg<0.6.0,>=0.5.0
Provides-Extra: dev
Requires-Dist: pytest<9.0.0,>=8.0.0; extra == "dev"
Requires-Dist: httpx<0.28.0,>=0.27.0; extra == "dev"
Dynamic: license-file

# MCP Tools Project

## Overview

This project is a collection of tools and servers related to the Anthropic Model Context Protocol (MCP). It aims to provide useful utilities for AI-assisted Research & Development, Machine Learning, AI, Software, and IT engineering tasks.

The project includes:
*   An MCP Server implementation.
*   Various MCP client tools.
*   Development environment setup using Docker and Devcontainers.
*   Testing framework using Pytest.

## Project Structure

```
.
├── .devcontainer/        # VS Code Devcontainer configuration
│   └── devcontainer.json
├── AGENTS.md             # Instructions for AI agents working on this repo
├── Dockerfile            # Docker configuration for the application
├── LICENSE               # Project License
├── pyproject.toml        # Python project metadata and dependencies (for UV tool)
├── README.md             # This file
├── scripts/              # Utility scripts
│   └── git-amend-author-and-sign.sh # Script for amending commit authors and signing
├── src/                  # Source code
│   ├── mcp_server/       # MCP Server implementation
│   │   └── main.py
│   └── mcp_tools/        # Client tools interacting with MCP
│       └── echo_tool/
│           └── client.py
└── tests/                # Tests
    ├── integration/      # Integration tests
    │   └── test_echo_tool.py
    └── unit/             # Unit tests
        └── test_server.py
```

## Getting Started

### Prerequisites

*   [Docker](https://www.docker.com/get-started)
*   [VS Code](https://code.visualstudio.com/)
*   [Remote - Containers extension for VS Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
*   `uv` (Python packaging tool - will be installed in devcontainer, but useful locally too: `pip install uv`)
*   `git`

### Setup with Devcontainer (Recommended)

1.  **Clone the repository:**
    ```bash
    git clone <repository-url>
    cd <repository-name>
    ```

2.  **Open in VS Code:**
    Open the cloned repository folder in VS Code.

3.  **Reopen in Container:**
    VS Code should prompt you to "Reopen in Container". Click it. This will build the Docker image defined in `Dockerfile` and configure the development environment as specified in `.devcontainer/devcontainer.json`. Dependencies listed in `pyproject.toml` will be installed automatically.

### Manual Setup (without Devcontainer)

1.  **Clone the repository (if not already done).**
2.  **Create and activate a virtual environment:**
    ```bash
    uv venv .venv
    source .venv/bin/activate
    ```
    (On Windows: `.venv\Scripts\activate`)
3.  **Install dependencies:**
    ```bash
    uv pip install -e .[dev]
    ```

## Running the MCP Server

*   **Inside Devcontainer or Manual Setup (with venv activated):**
    The MCP server is a FastAPI application. You can run it using Uvicorn:
    ```bash
    uvicorn src.mcp_server.main:app --reload --host 0.0.0.0 --port 8000
    ```
    The server will be available at `http://localhost:8000`.
    The API documentation (Swagger UI) will be at `http://localhost:8000/docs`.

## Running Tests

Tests are written using `pytest`.

*   **Inside Devcontainer or Manual Setup (with venv activated):**
    To run all tests:
    ```bash
    uv run pytest
    ```
    Or simply:
    ```bash
    pytest
    ```
    Pytest is configured in `pyproject.toml` to automatically find tests and the `src` directory.

## Using Tools

### Echo Tool

The Echo Tool is a simple client that sends a message to the MCP server's echo endpoint and prints the response.

*   **Usage (assuming server is running and venv is active or in devcontainer):**
    ```bash
    python src/mcp_tools/echo_tool/client.py "Your message here"
    ```
    Optional arguments:
    *   `--server-url`: Specify the server URL (default: `http://localhost:8000`).
    *   `--context-id`: Specify an optional context ID.

    Example:
    ```bash
    python src/mcp_tools/echo_tool/client.py "Hello MCP" --server-url http://localhost:8000
    ```

## Commit Author Amendment and Signing Script

A utility script `scripts/git-amend-author-and-sign.sh` is provided to help amend the author of a series of commits on a branch and prepare them for GPG signing. This is useful for ensuring commits adhere to specific authorship requirements and are properly signed.

### Purpose

When contributing code, especially if changes were initially made by an AI agent or under a different Git configuration, this script helps to:
1.  Standardize the commit author to a designated name and email.
2.  Guide the user through an interactive rebase to sign each commit individually with their GPG key.

### Prerequisites for the Script

*   `git` installed and configured.
*   A GPG key configured with Git for signing commits. See [GitHub's guide on signing commits](https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits).
*   The script should be run from the root of the repository.

### Usage

```bash
./scripts/git-amend-author-and-sign.sh <branch-name> <base-branch>
```

*   `<branch-name>`: The local feature branch whose commits you want to amend and sign.
*   `<base-branch>`: The base branch (e.g., `main`, `develop`) against which to find the commits to process.

**Example:**
If you have a branch named `feature/new-tool` that was based off `main`:
```bash
chmod +x scripts/git-amend-author-and-sign.sh # Make it executable first
./scripts/git-amend-author-and-sign.sh feature/new-tool main
```

### Workflow of the Script

1.  **Validation:** Checks if the branches exist and if the working directory is clean.
2.  **Confirmation:** Asks for confirmation before starting the interactive rebase.
3.  **Interactive Rebase:**
    *   The script automatically starts an interactive rebase (`git rebase -i <base-branch>`).
    *   It sets `GIT_SEQUENCE_EDITOR` to mark all commits in the rebase list for `edit`.
4.  **User Actions During Rebase:**
    *   Git will stop at each commit marked for `edit`.
    *   The script provides instructions printed to the console:
        *   **Amend Author:** Run `git commit --amend --author="Tyler Zervas <tz-dev@vectorwieght.com>" --no-edit` (the script pre-fills the configured author).
        *   **Sign Commit:** Run `git commit --amend -S`. This will use your GPG key. You can combine this with the author amend: `git commit --amend --author="Tyler Zervas <tz-dev@vectorwieght.com>" -S --no-edit`.
        *   **Continue Rebase:** After amending and/or signing, run `git rebase --continue`.
    *   Repeat these steps for each commit.
5.  **Completion:**
    *   After the rebase is successfully completed, the commits on `<branch-name>` will have the new author and will be signed.
    *   The script will remind you to force-push the changes: `git push --force-with-lease origin <branch-name>`. **Always verify your changes locally before force-pushing.**

**Important Notes for the Script:**
*   If any conflicts occur during the rebase, you will need to resolve them manually, then `git add <resolved-files>`, and `git rebase --continue`.
*   To abort the entire rebase process at any time, use `git rebase --abort`.
*   The target author (`Tyler Zervas <tz-dev@vectorwieght.com>`) is currently hardcoded in the script. This can be modified if needed.

## Contributing

Please refer to `AGENTS.md` for guidelines on contributing to this project, especially if you are an AI agent.
Key points:
*   Follow PEP 8 for Python code.
*   Write tests for all new features and bug fixes using Pytest.
*   Use feature branches for development.
*   Ensure commits are signed (see script above if needed).
